"""
1. 解释机器语言，汇编语言和高级语言的特点:
    机器语言是二进制编程使用的语言，编程开发效率低，程序运行效率高，不需要操作系统，直接操作硬件；
    汇编语言是用简写的英文标志符去取代二进制，编程开发效率提升，程序运行效率略降低，不需要操作系统，直接操作硬件；
    高级语言建立在操作系统的基础之上，编程开发效率高，程序运行效率低。

2. 解释编译型语言与解释型语言的区别
    不同类型的高级语言，转换为二进制的方式不同。
    对于编译型语言，在程序执行之前首先需要编译器编译为二进制才能运行。当程序需要修改时，需要修改源文件。编译型语言执行速度快，需要依赖编译起，调试麻烦。
    对于解释型语言，在程序执行时会同步有解释器进行翻译，不能生成可独立执行的可执行文件，不能脱离解释器。解释型语言比较灵活，可以动态地调整、修改应用程序。
    当编写的程序不需要经常改动或者升级的时候，通常选用编译型语言；当编写的程序需要经常改动升级以此来满足用户的新需求的时候，通常选用解释型语言。

3. 阐述Python的基本数据数据类型
    str：字符串，单引号或双引号内，不可变类型
    int：整型，   整数，不可变类型
    float：浮点型，小数，不可变类型
    list：列表，中括号内，逗号分隔，任意相同/不同数据类型，可变类型
    tuple：元组，小括号内，逗号分隔，任意相同/不同数据类型，不可变类型
    dict：字典，花括号内，逗号分隔，键值对形式，键只能是不可变类型，可变类型
    set：集合，花括号内，逗号分隔，元素不可重复，可变类型
    bool：布尔型，只有两个值：true和false

4. 在终端环境下配置好Python2和Python3共存的环境
5. 用Python写一个与用户交互的程序，提前定义好一个年龄，请用户猜年龄

"""



my_age = 26
guess_times = 1
while True:
    your_guess = int(input("你猜我的年龄是："))
    if my_age < your_guess:
        print("我看起来这么沧桑吗？")
        guess_times += 1
    elif my_age > your_guess:
        print("我看起来这么年轻吗？")
        guess_times += 1
    else:
        if guess_times <= 3:
            print("只猜了%d次就猜对了，你太聪明了了～"  % guess_times)
            break
        else:
            print("你猜了%d次才猜对，友尽了。。。" % guess_times)
            break